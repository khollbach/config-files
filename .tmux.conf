# -----------------------------------------------------------------------------
# Options
# -----------------------------------------------------------------------------

# When TERM is set to xterm-256color (or similar) outisde tmux, assume support
# for true (24-bit) color.
set -ga terminal-overrides *-256color:Tc

# Correctly set TERM inside tmux.
if "test $TERM = xterm-256color" \
    'set -g default-terminal screen-256color'

# Send escape key (almost) right away when pressed (5 ms).
# Default is half of a second, which feels way less responsive.
# When this was set to 0, I occasionally had issues.
set -g escape-time 5

# Let nvim (and possibly other programs) know when focus is gained/lost.
# In nvim, this corresponds to a FocusGained/FocusLost event.
set -g focus-events on

# Use emacs-style keybindings in command-line mode.
set -g status-keys emacs

# Use vi-style keybindings in copy mode.
set -g mode-keys vi

# Make the word separators used for `w` motion more Vim-like; ie, everything
# but `_`.
set -g word-separators ' !"#$%&()*+,-./:;<=>?@[\]^`{|}+~'
set -ga word-separators "'"

# Keep way more history. 100,000 lines shouldn't be more than a few MB.
set -g history-limit 100000

# Show messages in the status line for longer (1.25 seconds, default is 0.75).
set -g display-time 1250

# 12-hour time format for `prefix t` time display.
set -g clock-mode-style 12

# Start window numbers from 1.
set -g base-index 1

# Invert colors for the active window name, to "highlight" the tab.
set -g window-status-current-style reverse

# Bold window name when a bell rings in another window.
set -g window-status-bell-style bold

# Show the "terminal titles" (when they exist) in the list of window names
# (i.e. "tabs") in the status bar. Titles are truncated at 16 chars.
# Titles can sometimes be things like the currently open file in vim (if
# properly configured) or the remote server in ssh.
SHOW_TERMTITLE="#{&&:#{!=:#T,},#{!=:#W,bash}}"
WINDOW_STATUS_FORMAT="#{?window_bell_flag,!,}#I:#{=16:window_name}#{?$SHOW_TERMTITLE,:#{=16:pane_title},}"
set -g window-status-format \
    " #{?window_zoomed_flag,#[fg=red]z-#[default],}$WINDOW_STATUS_FORMAT "
set -g window-status-current-format \
    " #{?window_zoomed_flag,#[bg=red]z-#[default],}$WINDOW_STATUS_FORMAT "

# There's whitespace in the above strings, so we can remove it from these ones.
# (I moved the spaces into the above settings so that the background-highlight
# for the active-window-name includes one space on either side of the name.)
set -g window-status-separator ""
set -g status-left "[#S]"

# 12-hour clock in the status bar.
set -g status-right ' %l:%M%P '

# Different color theme on different machines.
%if 1  # Unknown machine; most likely a remote connection.
    # Cyan!
    set -g status-style fg=brightblack,bg=cyan
    set -g pane-active-border-style fg=cyan
    set -g pane-border-style fg=default

    # Status bar initially shown.
    set -g status on
%endif
# There are no else statements, so the above is the "else" block to this "if".
# (Both run, but these later settings overwrite the previous ones.)
%if #{||:#{||:#{m:kevan-*,#{host}},#{m:*-lt,#{host}}},#{m:*-dt,#{host}}}
    # Dark grey.
    set -g status-style fg=brightblack,bg=brightgreen
    set -g pane-active-border-style fg=brightgreen
    set -g pane-border-style fg=black

    # Light grey, for light terminal backgrounds.
    #set -g status-style fg=brightgreen,bg=white
    #set -g pane-active-border-style fg=brightcyan
    #set -g pane-border-style fg=white

    # Status bar initially hidden.
    set -g status off
%endif

# -----------------------------------------------------------------------------
# Keybinds
# -----------------------------------------------------------------------------

# Change prefix key to M-a
set -g prefix M-a
bind M-a send-prefix
unbind C-b

# Open a tmux command prompt with M-s. Default keybind is `prefix :`
bind -n M-s command-prompt

# Redraw the screen, in case something goes wonky.
bind -n M-r refresh-client

# Copy / paste. (Paste from the system clipboard!)
bind -n M-c copy-mode
bind M-c send-keys M-c
bind -n M-v run \
    "command -v xclip > /dev/null && \
     (xclip -out -selection clipboard | tmux load-buffer -); \
     tmux paste-buffer"
unbind [
unbind ]

# Toggle the status bar.
bind -n "M-'" set status

# Launch new windows in the same directory as the current pane
# Also, unhide the status line whenever you create a new window.
# Rebind to M-i instead of `prefix c`.
bind -n M-i new-window -c "#{pane_current_path}" \; set status on
unbind c

# Unhide the status line when you break a pane into its own window.
# Also, rebind this action to M-x instead of `prefix shift 1`.
bind -n M-x break-pane \; set status on
unbind !

# Bind page-up to "enter copy mode and go back one page", and then auto-exit
# copy-mode upon paging to the bottom. Basically, make page-up/page-down behave
# as expected.
bind -n PageUp copy-mode -eu
bind -n PageDown run true  # Do nothing when in normal mode.

# Toggle fullscreen ("zoom") for the current pane.
bind -n M-z resize-pane -Z

# Change pane layouts.
bind -n M-Home select-layout even-horizontal
bind -n M-End select-layout even-vertical



# Switch panes.
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Resize panes.
bind -n M-K resize-pane -U 5
bind -n M-J resize-pane -D 5
bind -n M-H resize-pane -L 10
bind -n M-L resize-pane -R 10

# Split current pane.
bind h split-window -c "#{pane_current_path}" -h \; swap-pane -U
bind j split-window -c "#{pane_current_path}"
bind k split-window -c "#{pane_current_path}" \; swap-pane -U
bind l split-window -c "#{pane_current_path}" -h

# Swap two ajacent panes.
bind M-h swap-pane -d -t {left-of}
bind M-j swap-pane -d -t {down-of}
bind M-k swap-pane -d -t {up-of}
bind M-l swap-pane -d -t {right-of}



# Switch windows
bind -n M-, previous-window
bind -n 'M-\;' next-window

# Select window by number.
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# Move current pane to target window.
bind -n M-! join-pane -t :1
bind -n M-@ join-pane -t :2
bind -n "M-#" join-pane -t :3
bind -n 'M-$' join-pane -t :4
bind -n M-% join-pane -t :5
bind -n M-^ join-pane -t :6
bind -n M-& join-pane -t :7
bind -n M-* join-pane -t :8
bind -n M-( join-pane -t :9



# Re-number (aka "move") current window within this session.
bind -n M-. command-prompt -1 -p 'Renumber window to:' 'move-window -t %%'

# Move current pane to another session.
bind -n M-m command-prompt -p 'Move pane to session:' 'join-pane -t %%:'

# Move current window to another session.
bind -n M-/ command-prompt -p 'Move window to session:' 'move-window -t %%:'



# Save the current pane's history to a file, including color escape sequences.
bind y command-prompt -p 'Save history to filename:' -I '~/tmux-history' \
    'capture-pane -e -S - ; save-buffer %% ; delete-buffer'

# The same as above, but with no colors.
bind Y command-prompt -p 'Save history to filename:' -I '~/tmux-history' \
    'capture-pane -S - ; save-buffer %% ; delete-buffer'

# -----------------------------------------------------------------------------
# Copy mode binds
# -----------------------------------------------------------------------------

# Use v to select text, vi-style.
bind -T copy-mode-vi v send-keys -X begin-selection

# Rebind rectangle-toggle.
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Don't accidentally exit copy mode. Also can use this to cancel selection.
bind -T copy-mode-vi C-c send-keys -X clear-selection

# Do exit copy mode when escape is pressed (the other keybind for this is `q`).
bind -T copy-mode-vi Escape send-keys -X cancel

# Scroll 5x faster in copy mode.
bind -T copy-mode-vi C-e send-keys -X -N 5 scroll-down
bind -T copy-mode-vi C-y send-keys -X -N 5 scroll-up

# i-search!
bind -T copy-mode-vi C-r command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi C-s command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""

# Home and end keys.
bind -T copy-mode-vi Home send-keys -X back-to-indentation
bind -T copy-mode-vi End send-keys -X end-of-line



# Yank to the system clipboard by default (if xclip is installed).
bind -T copy-mode-vi Enter \
    send-keys -X copy-pipe-and-cancel \
    "command -v xclip && xclip -in -selection clipboard || tmux load-buffer -"

# Also yank the selection using the `x` key, since enter is a little far.
bind -T copy-mode-vi x \
    send-keys -X copy-pipe-and-cancel \
    "command -v xclip && xclip -in -selection clipboard || tmux load-buffer -"

# Yank the selection (to the system clipboard), without leaving copy mode.
# The `refresh-client` is because copy-pipe garbles the text on the screen for
# some reason.
bind -T copy-mode-vi y \
    send-keys -X copy-pipe \
    "command -v xclip && xclip -in -selection clipboard || tmux load-buffer -" \; \
    send-keys -X clear-selection \; \
    refresh-client

# Yank the current line, without the trailing newline.
bind -T copy-mode-vi d \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-and-cancel "tr -d '\n' | \
    (command -v xclip && xclip -in -selection clipboard || tmux load-buffer -)"

# Yank from the cursor to end-of-line, without the trailing newline.
bind -T copy-mode-vi D \
    send-keys -X begin-selection \; \
    send-keys -X end-of-line \; \
    send-keys -X copy-pipe-and-cancel "tr -d '\n' | \
    (command -v xclip && xclip -in -selection clipboard || tmux load-buffer -)"
