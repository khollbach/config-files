# -----------------------------------------------------------------------------
# Options
# -----------------------------------------------------------------------------

# When TERM is set to xterm-256color (or similar) outisde tmux, assume support
# for true (24-bit) color.
set -ga terminal-overrides *-256color:Tc,alacritty*:Tc

# Correctly set TERM inside tmux.
if "test $TERM = xterm-256color" \
    'set -g default-terminal screen-256color'

# Send escape key (almost) right away when pressed (1 ms).
# Default is half of a second, which feels way less responsive.
# When this was set to 0, I occasionally had issues.
set -g escape-time 1

# Enable mouse support, so that the scroll wheel works as expected.
set -g mouse on

# Let nvim (and possibly other programs) know when focus is gained/lost.
# In nvim, this corresponds to a FocusGained/FocusLost event.
# https://unix.stackexchange.com/a/383044
set -g focus-events on

# Keep _way_ more history. 1,000,000 lines shouldn't be more than 0.1 GB.
set -g history-limit 1000000

# Show messages in the status line for longer (1.25 seconds, default is 0.75).
set -g display-time 1250

# 12-hour time format for `prefix t` time display.
set -g clock-mode-style 12



# Use emacs-style key bindings in command-line mode.
set -g status-keys emacs

# Use vi-style key bindings in copy mode.
set -g mode-keys vi

# Make the word separators used for `w` motion more Vim-like; i.e., everything
# but `_`.
set -g word-separators ' !"#$%&()*+,-./:;<=>?@[\]^`{|}+~'
set -ga word-separators "'"

# Don't automatically set the system clipboard when copying, since we do it
# manually in the copy key bindings.
set -g set-clipboard off



# Dark theme.
set -g status-style fg=black,bg=brightblack
set -g pane-active-border-style fg=brightblack
set -g pane-border-style fg=black

# Light theme.
#set -g status-style fg=brightwhite,bg=green
#set -g pane-active-border-style fg=green
#set -g pane-border-style fg=brightwhite

# Status bar initially hidden.
set -g status off



# Start window numbers from 1.
set -g base-index 1

# Invert colors for the active window name, to "highlight" the tab.
set -g window-status-current-style reverse

# Show window name in bold when a bell rings in another window.
set -g window-status-bell-style bold

# Show the "terminal titles" (when they exist) in the list of window names
# (i.e. "tabs") in the status bar. Titles are truncated at 16 chars.
#
# Titles can sometimes be things like the currently open file in vim (if
# properly configured) or the remote server in ssh.
show_title="#{&&:#{!=:#T,},#{!=:#W,bash}}"
title="#{?$show_title,:#{=16:pane_title},}"
window_status="#I:#{=16:window_name}$title#{?window_bell_flag,!,}"
zoom="#{?window_zoomed_flag, #[bg=red]z,}"
set -g window-status-current-format " $window_status$zoom "
set -g window-status-format " $window_status "

# There's whitespace in the above strings, so we can remove it from these ones.
#
# I moved the spaces into the above settings so that the background-highlight
# for the active-window-name includes one space on either side of the name.
set -g window-status-separator ""
set -g status-left "[#S]"

# 12-hour clock in the status bar.
#set -g status-right ' %l:%M %p '
# Disabled, for now.
set -g status-right ''



# -----------------------------------------------------------------------------
# Key bindings
# -----------------------------------------------------------------------------

# Change prefix key to M-e
set -g prefix M-e
bind M-e send-prefix
unbind C-b

# Enter tmux commands with M-p
bind -n M-p command-prompt

# Redraw the screen, in case something goes wonky.
bind -n M-r refresh-client

# Enter copy mode.
bind -n M-c copy-mode
# Paste, from the system clipboard.
bind -n M-v \
    run 'xclip -out -selection clipboard | tmux load-buffer -' \; \
    paste-buffer
unbind [
unbind ]



# Toggle the status bar.
bind -n "M-'" set status

# Launch new windows in the same directory as the current pane
# Also, unhide the status line whenever you create a new window.
bind -n M-m new-window -c "#{pane_current_path}" \; set status on
unbind c

# Unhide the status line when you break a pane into its own window.
bind -n M-x break-pane \; set status on
unbind !

# Toggle fullscreen ("zoom") for the current pane.
bind -n M-z resize-pane -Z

# Change pane layouts.
bind -n M-Home select-layout even-horizontal
bind -n M-End select-layout even-vertical



# Switch panes.
bind -n M-i select-pane -U
bind -n M-j select-pane -L
bind -n M-k select-pane -D
bind -n M-l select-pane -R

# Resize panes.
bind -n M-I resize-pane -U 5
bind -n M-J resize-pane -L 10
bind -n M-K resize-pane -D 5
bind -n M-L resize-pane -R 10

# Split current pane.
bind u split-window -c "#{pane_current_path}" \; swap-pane -U
bind n split-window -c "#{pane_current_path}" -h \; swap-pane -U
bind e split-window -c "#{pane_current_path}"
bind o split-window -c "#{pane_current_path}" -h

# Swap two panes.
bind M-i swap-pane -d -t "{up-of}"
bind M-j swap-pane -d -t "{left-of}"
bind M-k swap-pane -d -t "{down-of}"
bind M-l swap-pane -d -t "{right-of}"



# Switch windows
bind -n M-, previous-window
bind -n M-. next-window

# Select window by number.
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-0 select-window -t 10

# Move current pane to target window.
bind -n M-! join-pane -t :1
bind -n M-@ join-pane -t :2
bind -n "M-#" join-pane -t :3
bind -n 'M-$' join-pane -t :4
bind -n M-% join-pane -t :5
bind -n M-^ join-pane -t :6
bind -n M-& join-pane -t :7
bind -n M-* join-pane -t :8
bind -n M-( join-pane -t :9



# Re-number (aka "move") current window within this session.
#bind -n M-. command-prompt -1 -p 'Renumber window to:' 'move-window -t %%'
#unbind .

# Move current pane to another session.
#bind -n M-m command-prompt -p 'Move pane to session:' 'join-pane -t %%:'

# Move current window to another session.
#bind -n M-/ command-prompt -p 'Move window to session:' 'move-window -t %%:'



# Save the current pane's history to a file, including color escape sequences.
bind y command-prompt -p 'Save history to filename:' -I '~/tmux-history' \
    'capture-pane -e -S - ; save-buffer %% ; delete-buffer'

# The same as above, but with no colors.
bind Y command-prompt -p 'Save history to filename:' -I '~/tmux-history' \
    'capture-pane -S - ; save-buffer %% ; delete-buffer'



# -----------------------------------------------------------------------------
# Copy mode key bindings.
# -----------------------------------------------------------------------------

source-file ~/.config/tmux/vi-remap.conf

# Bind page up and page down in normal mode.
bind -n PageUp copy-mode -u
bind -n PageDown run true

# If you page down all the way to the bottom, exit copy mode.
bind -T copy-mode-vi PageDown send -X page-down-and-cancel

# i-search
bind -T copy-mode-vi C-r \
    command-prompt -i -I "#{pane_search_string}" -p "(search up)" \
    'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi C-s \
    command-prompt -i -I "#{pane_search_string}" -p "(search down)" \
    'send -X search-forward-incremental "%%%"'



# Regular copy.
bind -T copy-mode-vi Enter \
    send -X copy-pipe-and-cancel \
        'xclip -in -selection clipboard'

# Copy, but don't exit copy mode.
bind -T copy-mode-vi d \
    send -X copy-pipe \
        'xclip -in -selection clipboard'

# Copy the current line (no trailing newline).
#
# It seems we must turn off the `set-clipboard` option for this to work.
# Otherwise, tmux automatically sets the system clipboard as well, causing a
# race condition. Depending on which happens first, the system clipboard may or
# may not have a trailing newline.
bind -T copy-mode-vi r \
    send -X select-line \; \
    send -X copy-pipe-and-cancel \
        "tr -d '\n' | xclip -in -selection clipboard"

# Copy to the end of the current line.
bind -T copy-mode-vi w \
    send -X begin-selection \; \
    send -X end-of-line \; \
    send -X copy-pipe-and-cancel \
        "tr -d '\n' | xclip -in -selection clipboard"
