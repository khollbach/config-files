Important use case: go to uses of a function / type in Vim (easy if in the same file; o/w currently very hard). Could maybe be done in an fzf popup window with filename:lineno + a preview of the file? Using ripgrep somehow?
- Figure out what you need, and look for possible solutions.
- Could use the keybind 'K' for go-to-uses

---

Get toggle-colors to do xfce4 terminal palette as well!

Could probably update the fzf reverse-i-search commandline feature to run on the first enter press (since the chdir feature has that functionality). Then you'll need a separate keybind to edit the command before running, but you could just use C-t or something for that.

Figure out how to get the fzf commandline to use a different highlight color for light backgrounds.

Install, set-up, and add to ./other-settings:
    wfxr/forgit

---

tmux keybinds: alt-shift-, and alt-shift-;
- Swap current window with next/prev window.

tmux keybind: alt-shift-X
- Break window into new terminal.
  - This means creating a new session,  ] -> Unless these have their own tmux command ???
    moving the window to that session,  ]
    then opening a new terminal attached to that session.

---

Look at this line in TJ's vimrc:
    nnoremap <leader>m :MRU<CR>

---

    Vim plugins to try:
    ===================

tag management?
- e.g., easytags?
- ?: https://ricostacruz.com/til/navigate-code-with-ctags

LSP (language server protocol) support:
    ale > syntastic !!
        " v suggested
        let g:ale_linters = {'go': ['gopls', 'goimports'], 'python': ['flake8', 'pylint'], 'javascript': ['flow-language-server'],}
        let g:ale_fixers = {'go': ['goimports']}
        let g:ale_go_gometalinter_options = '--fast'
        let g:terraform_align=1
        let g:go_def_mode='gopls'
        let g:go_info_mode='gopls'
        let g:ale_fix_on_save = 1
        let g:go_fmt_command = "goimports"
    Ale seems pretty good, also TJ has some good setup options for it.
    Also, checkout for python as well as go.

Further LSP support: coc

Completion (if not good enough via ale/coc/vim-go etc):
- YouCompleteMe ?
- Deoplete ?
  - Clean up deoplete section of vimrc, and either debug deoplete, or get a new completion plugin.
- "Fuzzy" fzf-style search for possible completions is a must.

---

Check out TJ's dotfiles to look for other goodies.

Vim: why does the main split's filename disappear when I'm focusing the quickfix list?

Fix the way <leader>q interacts with goyo-mode.

Goyo plugin hides cursor when its over a trailing whitespace (or any tab
character) in normal mode. No big deal, but maybe there's a quick fix.

---

Some guy from #vim on slack, re: preview window for fzf find:
" junegunn/fzf.vim
" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)nnoremap <Leader>f :Files<CR>
nnoremap <Leader>g :Rg<Space>
nnoremap <Leader>j :BTags<CR>
nnoremap <Leader>a :Buffers<CR>
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Todo', 'rounded': v:false } }

---

Debug complete-alias + git. See todos in `.bash_aliases`.

Build the code and run go-imports on save.
- does this already happen?
- what's go-imports?

Look at vim-go instructions.

Could find a way to get your config files to have any directory name, so you can rename them at work
- Maybe part of update configs will involve setting the name somewhere or something? This might be a little tricky, and you might have to replace the text in profile, etc.
- Or else could you avoiding mentioning `config-files` by name in .profile and stuff by symlinking a bin folder somewhere? Think over the options.

Why does my xfce+i3 take so long to load xfce4-panel?
- I can start terminals right away, but the panel takes forever. I never had this problem with vanilla xfce4.
- Happens at work too.

Make vim open files as read-only always by default, and then upon any command that would modify the file, lock the file as being written to (by unsetting readonly). This would solve the problem of opening a file just to look at (or even jumping to a defn in a file and then jumping back) in a vim session, then trying to actually *edit* that file later in another vim session (while the first session is still open). Really, this should just work in the obvious way.
- This seems super obvious, so maybe there's already a plugin for this?
