#!/bin/bash

# NOTE: this is copied from gitrecurse.

# If the current directory is a jj repo, run the given shell command.
# Otherwise, run it in *each* direct sub-directory that is a jj repo.
#
# This script is called `jjrecurse` for historical reasons, it doesn't recurse
# into sub-sub-dirs anymore.
#
# Example usage:
# $ cd ~
# $ jjrecurse jj st
# ...
# $ jjrecurse jj git fetch
# ...
function main {
    local shell_command=("$@")

    if jj workspace root &>/dev/null; then
        "${shell_command[@]}"
    else
        local any_successes

        # For every subdir.
        for dir in */ .*/; do
            # (Weird edge case: empty globs.)
            if [[ "$dir" == "*/" || "$dir" == ".*/" ]]; then break; fi
            if [[ "$dir" == . || "$dir" == .. ]]; then continue; fi

            pushd "$dir" >/dev/null || continue

            # If this is the root of a jj repo, print the repo name (in blue)
            # and then run the command.
            if [[ -d .jj ]]; then
                if [[ -n "$any_successes" ]]; then
                    echo
                fi

                echo -e "\e[0;34m$PWD\e[0m"
                "${shell_command[@]}"

                any_successes=true
            fi

            popd >/dev/null || exit 1
        done

        if [[ -z "$any_successes" ]]; then
            echo "$PWD isn't a jj repository, and neither are any immediate sub-directories."
            exit 1
        fi
    fi
}

main "$@"
