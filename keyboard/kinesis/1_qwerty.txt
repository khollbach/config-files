# Kinesis Advantage 2 on-board drive keymap.
#
# To put this on the keyboard, see: https://gist.github.com/nicholasknight/181375ee15f9cb89d3c69f4cc2b63df9#the-on-board-drive
#
# In summary:
#   progm+shift+escape => super-user mode on/off
#   progm+F1 => mount/unmount on-board drive
#   Copy the file to the `active/` directory with the name `1_qwerty.txt`.
#   progm+F3 => activate the qwerty map
#   progm+1 => activate the new mapping file
# For the first two commands, the lights will flash three times for
# "on"/"mounted", and twice for "off"/"unmounted".
#
# See also the KA2 manual. The appendix has a visualization, with keycodes.

# Misc mappings. --------------------------------------------------------------

# Left/right thumb clusters: mostly modifier keys.
# Left:
[bspace]>[lshift]
[delete]>[lctrl]
[lctrl]>[escape]
[lalt]>[lalt]
[home]>[lwin]
[end]>[rctrl]
# Right:
[space]>[space]
[enter]>[lalt]  # Use lalt since ralt is mapped to esc in xkb (for my laptop).
[rctrl]>[enter]
[rwin]>[insert]
[pup]>[delete]
[pdown]>[rshift]

# Thumb cluster modifiers, repeated for key-pad mode.
# (So that I can do, e.g., ctrl-shift-F5.)
# Left:
[kp-bspace]>[lshift]
[kp-delete]>[lctrl]
[kp-lctrl]>[null]
[kp-lalt]>[lalt]
[kp-home]>[lwin]
[kp-end]>[rctrl]
# Right:
[kp0]>[null]
[kp-enter]>[lalt]
[kp-rctrl]>[null]
[kp-rwin]>[null]
[kp-pup]>[rwin]
[kp-pdown]>[rshift]

# capslock => backspace
# left/right shift => home/end
# If you really want to toggle capslock, you can use kpshift+caps.
[caps]>[bspace]
[lshift]>[home]
[rshift]>[end]

# Flip up and down arrow keys. This is because of Vim muscle memory: the
# up/down arrows are directly below J/K.
[up]>[down]
[down]>[up]

# Invert volume buttons with print-screen/scroll-lock/pause-break, so that you
# can change volume without being in key-pad mode or holding down 'kpshift'.
[prtscr]>[mute]
[scroll]>[vol-]
[pause]>[vol+]
[mute]>[prtscr]
[vol+]>[scroll]
[vol-]>[pause]

# Key-pad layer mappings. -----------------------------------------------------

# The `kpshift` logical key behaves as a function-modifier for the 'key-pad'
# layer. When held, pressing keys will generate their key-pad mode mapping
# instead of their normal mode mapping. A quirk is that you have to map both
# the normal version and the key-pad version of the key that you want to behave
# as a modifier; in our case:
[intl-\]>[kpshift]
[kp-insert]>[kpshift]

# Null-out unused function-modified keys in the key-pad keywell.
[kp-6]>[null]
[kp-y]>[null]
[kp-h]>[null]
[kp-n]>[null]
[kpmult]>[null]
[kpmin]>[null]
[kpplus]>[null]
[kpenter1]>[null]
[kpenter2]>[null]
[kp-hyphen]>[null]
[kp-\]>[null]
[kp-']>[null]  # '
[kp-rshift]>[null]

# Function keys F1-F12.
[kp1]>[f1]
[kp2]>[f2]
[kp3]>[f3]
[kp4]>[f4]
[kp5]>[f5]
[kp6]>[f6]
[kp7]>[f7]
[kp8]>[f8]
[kp9]>[f9]
[numlk]>[f10]
[kp=]>[f11]
[kpdiv]>[f12]

# Volume down/up/mute. (Under up/down arrows.)
[kp-up]>[vol-]
[kp-down]>[vol+]
[kp.]>[mute]

# page-down / page-up   =>   kpshift+SPC / kpshift+;
# (They're easy to hit.)
[kp0]>[pdown]
[kpplus]>[pup]

# Print screen. (Under p key.)
[kpmin]>[prtscr]

# vim: set syntax=config:
