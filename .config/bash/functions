#!/bin/bash

# cd and ls.
function cs {
    cd "$@" && ls
}

# Run evince in the background and ignore stdout/stderr.
function ev {
    evince "$@" &> /dev/null &
}

# Ignore hidden directories in home. Also ignore ~/snap.
function rg {
    if [[ "$PWD" == "$HOME" ]]; then
        command rg -g '!/.*' -g '!/snap/' "$@"
    else
        command rg "$@"
    fi
}

# Ignore hidden directories in home. Also ignore ~/snap.
function fd {
    if [[ "$PWD" == "$HOME" ]]; then
        command fd --exclude '/.*' --exclude '/snap/' "$@"
    else
        command fd "$@"
    fi
}

# Invoke rust compiler. Pipe colorful stdout/err to less.
function rc {
    rustc --color always "$@" |& less -F
    return ${PIPESTATUS[0]}
}

# Invoke rust build tool. Pipe colorful stdout/err to less.
function cargo_less {
    command cargo --color always "$@" |& less -F
    return ${PIPESTATUS[0]}
}

# Time a long command and ring a bell when done.
function time_and_notify {
    # When did I start?
    date 1>&2
    echo 1>&2

    # Run and preserve the return value.
    local rv
    time "$@"
    rv=$?

    # Ring a bell, which shows up visually in tmux.
    echo -en '\a' 1>&2

    # Trigger a "system notification", i.e. desktop pop-up.
    local command=$@  # Flatten arg array into string.
    if [[ "$rv" == 0 ]]; then
        notify-send "Command finished" "$command" -i dialog-information 2>/dev/null
    else
        notify-send "Command failed: error $rv" "$command" -i dialog-error 2>/dev/null
    fi

    return $rv
}

# Run a command, but set the terminal title to the first non-flag argument.
function title_wrapper {
    local cmd=$1
    shift
    local args=("$@")

    local title
    while [[ -n "$1" ]]; do
        # If the arg starts with anything but `-`, use it as the title.
        # This isn't perfect, but it's good enough.
        if [[ "$1" =~ ^[^-] ]]; then
            title=$1
            break
        fi

        shift
    done

    # Set the terminal title.
    if [[ -n "$title" ]]; then
        echo -ne "\e]0;$title\a"
    fi

    command "$cmd" "${args[@]}"
}

# Usage example:
# $ get_latest_release neovim/neovim
# v0.5.0
#
# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
function get_latest_release {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                            # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}
