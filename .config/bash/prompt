#!/bin/bash

PROMPT_COMMAND=prompt_command

#prompt_contents='\u@\h:\w'
prompt_contents='\w'
prompt_color=9

# Different prompt color, to tell my machines apart.
regex='^khollbach-96.*$'
if [[ $(hostname) =~ $regex ]]; then
    prompt_color=14
fi
unset regex

# This sets the prompt, $PS1.
#
# It automatically re-runs each time, just before the prompt is printed.
function prompt_command {
    # Reset the terminal title after running any program, since it seems many
    # programs set it and then forget to clean it up when they exit.
    echo -ne "\e]0;\a"

    # Color escape codes.
    local color='\[\e[1;38;5;'"$prompt_color"'m\]'  # bold text, colorful
    local green='\[\e[38;5;2m\]'
    local reset='\[\e[0m\]'

    # Show the current git branch if you're in a git repo and you've checked
    # out anything other than master.
    local git_branch=$(parse_git_branch)
    if [ -n "$git_branch" ] \
        && [ "$git_branch" != '(master)' ] \
        && [ "$git_branch" != '(main)' ]
    then
        git_branch=" $green$git_branch$reset"
    else
        git_branch=""
    fi

    # Add a line break if $prompt_contents is anything more than '\w', or \w is
    # longer than 48 chars, or git branch is showing.
    local newline=""
    local w=$(dirs +0)
    if [[ -n "$prompt_contents" &&
        ("$prompt_contents" != '\w' || ${#w} -gt 48 || -n "$git_branch")
    ]]; then
        newline="\n"
    fi

    # Set the prompt; e.g.:
    # |
    # | ~/some-dir (branch-name)
    # | $ _
    # or:
    # |
    # | ~/some-dir$ _
    PS1="$reset\n"
    PS1="$PS1$color$prompt_contents$reset$git_branch$newline"
    PS1="$PS1$color"'\$'"$reset "
}

# Get the current git branch.
#
# https://stackoverflow.com/questions/15883416/adding-git-branch-on-the-bash-command-prompt
function parse_git_branch {
    command git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
